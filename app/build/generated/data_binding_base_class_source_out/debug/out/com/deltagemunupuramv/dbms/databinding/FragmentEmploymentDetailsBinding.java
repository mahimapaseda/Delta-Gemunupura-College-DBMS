// Generated by view binder compiler. Do not edit!
package com.deltagemunupuramv.dbms.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.widget.NestedScrollView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.deltagemunupuramv.dbms.R;
import com.google.android.material.textfield.TextInputEditText;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentEmploymentDetailsBinding implements ViewBinding {
  @NonNull
  private final NestedScrollView rootView;

  @NonNull
  public final TextInputEditText appointedSubjectEditText;

  @NonNull
  public final TextInputEditText classAndGradeEditText;

  @NonNull
  public final TextInputEditText dateOfAppointmentToSchoolEditText;

  @NonNull
  public final TextInputEditText dateOfFirstAppointmentEditText;

  @NonNull
  public final TextInputEditText educationalQualificationsEditText;

  @NonNull
  public final TextInputEditText gradesTaughtEditText;

  @NonNull
  public final TextInputEditText previouslyServedSchoolsEditText;

  @NonNull
  public final TextInputEditText professionalQualificationsEditText;

  @NonNull
  public final TextInputEditText subjectsTaughtEditText;

  private FragmentEmploymentDetailsBinding(@NonNull NestedScrollView rootView,
      @NonNull TextInputEditText appointedSubjectEditText,
      @NonNull TextInputEditText classAndGradeEditText,
      @NonNull TextInputEditText dateOfAppointmentToSchoolEditText,
      @NonNull TextInputEditText dateOfFirstAppointmentEditText,
      @NonNull TextInputEditText educationalQualificationsEditText,
      @NonNull TextInputEditText gradesTaughtEditText,
      @NonNull TextInputEditText previouslyServedSchoolsEditText,
      @NonNull TextInputEditText professionalQualificationsEditText,
      @NonNull TextInputEditText subjectsTaughtEditText) {
    this.rootView = rootView;
    this.appointedSubjectEditText = appointedSubjectEditText;
    this.classAndGradeEditText = classAndGradeEditText;
    this.dateOfAppointmentToSchoolEditText = dateOfAppointmentToSchoolEditText;
    this.dateOfFirstAppointmentEditText = dateOfFirstAppointmentEditText;
    this.educationalQualificationsEditText = educationalQualificationsEditText;
    this.gradesTaughtEditText = gradesTaughtEditText;
    this.previouslyServedSchoolsEditText = previouslyServedSchoolsEditText;
    this.professionalQualificationsEditText = professionalQualificationsEditText;
    this.subjectsTaughtEditText = subjectsTaughtEditText;
  }

  @Override
  @NonNull
  public NestedScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentEmploymentDetailsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentEmploymentDetailsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_employment_details, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentEmploymentDetailsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.appointedSubjectEditText;
      TextInputEditText appointedSubjectEditText = ViewBindings.findChildViewById(rootView, id);
      if (appointedSubjectEditText == null) {
        break missingId;
      }

      id = R.id.classAndGradeEditText;
      TextInputEditText classAndGradeEditText = ViewBindings.findChildViewById(rootView, id);
      if (classAndGradeEditText == null) {
        break missingId;
      }

      id = R.id.dateOfAppointmentToSchoolEditText;
      TextInputEditText dateOfAppointmentToSchoolEditText = ViewBindings.findChildViewById(rootView, id);
      if (dateOfAppointmentToSchoolEditText == null) {
        break missingId;
      }

      id = R.id.dateOfFirstAppointmentEditText;
      TextInputEditText dateOfFirstAppointmentEditText = ViewBindings.findChildViewById(rootView, id);
      if (dateOfFirstAppointmentEditText == null) {
        break missingId;
      }

      id = R.id.educationalQualificationsEditText;
      TextInputEditText educationalQualificationsEditText = ViewBindings.findChildViewById(rootView, id);
      if (educationalQualificationsEditText == null) {
        break missingId;
      }

      id = R.id.gradesTaughtEditText;
      TextInputEditText gradesTaughtEditText = ViewBindings.findChildViewById(rootView, id);
      if (gradesTaughtEditText == null) {
        break missingId;
      }

      id = R.id.previouslyServedSchoolsEditText;
      TextInputEditText previouslyServedSchoolsEditText = ViewBindings.findChildViewById(rootView, id);
      if (previouslyServedSchoolsEditText == null) {
        break missingId;
      }

      id = R.id.professionalQualificationsEditText;
      TextInputEditText professionalQualificationsEditText = ViewBindings.findChildViewById(rootView, id);
      if (professionalQualificationsEditText == null) {
        break missingId;
      }

      id = R.id.subjectsTaughtEditText;
      TextInputEditText subjectsTaughtEditText = ViewBindings.findChildViewById(rootView, id);
      if (subjectsTaughtEditText == null) {
        break missingId;
      }

      return new FragmentEmploymentDetailsBinding((NestedScrollView) rootView,
          appointedSubjectEditText, classAndGradeEditText, dateOfAppointmentToSchoolEditText,
          dateOfFirstAppointmentEditText, educationalQualificationsEditText, gradesTaughtEditText,
          previouslyServedSchoolsEditText, professionalQualificationsEditText,
          subjectsTaughtEditText);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
